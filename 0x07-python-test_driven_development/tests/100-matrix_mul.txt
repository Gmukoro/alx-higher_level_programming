import unittest

def matrix_mul(m_a, m_b):
    # ... (implementation of matrix_mul)

class TestMatrixMul(unittest.TestCase):

    def test_valid_matrices(self):
        result = matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
        self.assertEqual(result, [[58, 64], [139, 154]])

    def test_invalid_m_a_not_list(self):
        with self.assertRaises(TypeError):
            matrix_mul("not_a_list", [[1, 2], [3, 4]])

    def test_invalid_m_b_not_list(self):
        with self.assertRaises(TypeError):
            matrix_mul([[1, 2], [3, 4]], "not_a_list")

    def test_invalid_m_a_not_list_of_lists(self):
        with self.assertRaises(TypeError):
            matrix_mul([1, 2, 3], [[1, 2], [3, 4]])

    def test_invalid_m_b_not_list_of_lists(self):
        with self.assertRaises(TypeError):
            matrix_mul([[1, 2], [3, 4]], [1, 2, 3])

    def test_invalid_empty_m_a(self):
        with self.assertRaises(ValueError):
            matrix_mul([], [[1, 2], [3, 4]])

    def test_invalid_empty_m_b(self):
        with self.assertRaises(ValueError):
            matrix_mul([[1, 2], [3, 4]], [])

    def test_invalid_element_in_m_a(self):
        with self.assertRaises(TypeError):
            matrix_mul([[1, 2], ["a", 4]], [[1, 2], [3, 4]])

    def test_invalid_element_in_m_b(self):
        with self.assertRaises(TypeError):
            matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, "b"]])

    def test_invalid_m_a_not_rectangle(self):
        with self.assertRaises(ValueError):
            matrix_mul([[1, 2], [3, 4, 5], [6, 7, 8]], [[1, 2], [3, 4]])

    def test_invalid_m_b_not_rectangle(self):
        with self.assertRaises(ValueError):
            matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])

    def test_invalid_matrices_cant_multiply(self):
        with self.assertRaises(ValueError):
            matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [4, 5, 6]])

if __name__ == "__main__":
    unittest.main()

